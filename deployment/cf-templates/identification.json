{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Hammer identification stack",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": { "default": "Identification setup" },
                    "Parameters": [
                        "ResourcesPrefix",
                        "IdentificationIAMRole",
                        "IdentificationCheckRateExpression"
                    ]
                },
                {
                    "Label": { "default": "Sources" },
                    "Parameters": [
                        "SourceS3Bucket",
                        "SourceLogsForwarder",
                        "SourceBackupDDB",
                        "SourceIdentificationSG",
                        "SourceIdentificationCloudTrails",
                        "SourceIdentificationS3ACL",
                        "SourceIdentificationS3Policy",
                        "SourceIdentificationIAMUserKeysRotation",
                        "SourceIdentificationIAMUserInactiveKeys",
                        "SourceIdentificationEBSVolumes",
                        "SourceIdentificationEBSSnapshots",
                        "SourceIdentificationRDSSnapshots",
                        "SourceIdentificationAMIPublicAccess",
                        "SourceIdentificationRedshiftPublicAccess",
                        "SourceIdentificationRedshiftClusterEncryption",
                        "SourceIdentificationRedshiftLogging",
                        "SourceIdentificationECSPrivilegedAccess",
                        "SourceIdentificationECSLogging",
                        "SourceIdentificationECSExternalImageSource",
             						"SourceIdentificationElasticSearchLogging",
                        "SourceIdentificationElasticSearchEncryption",
                        "SourceIdentificationElasticSearchPublicAccess",
                        "SourceIdentificationTAChecks"
                    ]
                },
                {
                    "Label": { "default": "VPC config (optional)" },
                    "Parameters": [
                        "LambdaSubnets",
                        "LambdaSecurityGroups"
                    ]
                }
            ],
            "ParameterLabels": {
                "ResourcesPrefix": {
                    "default": "The prefix for all created resources"
                },
                "SourceS3Bucket": {
                    "default": "The name of the S3 bucket with sources"
                },
                "IdentificationIAMRole": {
                    "default": "The name of identification IAM role"
                },
                "IdentificationCheckRateExpression": {
                    "default": "CloudWatch Schedule Cron Expression for the interval between identification runs"
                },
                "LambdaSubnets": {
                    "default": "Subnet IDs in your VPC to run identification lambdas in"
                },
                "LambdaSecurityGroups": {
                    "default": "SecurityGroup IDs in your VPC to associate identification lambdas with"
                },
                "SourceLogsForwarder": {
                    "default": "Relative path to LogsForwarder lambda sources"
                },
                "SourceBackupDDB": {
                    "default": "Relative path to BackupDDB lambda sources"
                },
                "SourceIdentificationSG": {
                    "default": "Relative path to Insecure services lambda sources"
                },
                "SourceIdentificationCloudTrails": {
                    "default": "Relative path to CloudTrails lambda sources"
                },
                "SourceIdentificationS3ACL": {
                    "default": "Relative path to public S3 ACL lambda sources"
                },
                "SourceIdentificationS3Policy": {
                    "default": "Relative path to public S3 policy lambda sources"
                },
                "SourceIdentificationIAMUserKeysRotation": {
                    "default": "Relative path to IAM keys rotation lambda sources"
                },
                "SourceIdentificationIAMUserInactiveKeys": {
                    "default": "Relative path to IAM inactive keys lambda sources"
                },
                "SourceIdentificationEBSVolumes": {
                    "default": "Relative path to unencrypted EBS volumes lambda sources"
                },
                "SourceIdentificationEBSSnapshots": {
                    "default": "Relative path to public EBS snapshots lambda sources"
                },
                "SourceIdentificationRDSSnapshots": {
                    "default": "Relative path to public RDS snapshots lambda sources"
                },
                "SourceIdentificationAMIPublicAccess":{
                    "default": "Relative path to Public AMI sources"
                },
                "SourceIdentificationRedshiftPublicAccess":{
                    "default": "Relative path to publicly accessible Redshift Cluster sources"
                },
                "SourceIdentificationRedshiftClusterEncryption":{
                    "default": "Relative path to unencrypted Redshift Cluster sources"
                },
                "SourceIdentificationRedshiftLogging": {
                    "default": "Relative path to disabled logging Redshift Cluster sources"
                },
                "SourceIdentificationECSPrivilegedAccess":{
                    "default": "Relative path to privileged access issue ECS sources"
                },
                "SourceIdentificationECSLogging":{
                    "default": "Relative path to disabled logging ECS sources"
                },
                "SourceIdentificationECSExternalImageSource":{
                    "default": "Relative path to external image issue ECS sources"
                },
                "SourceIdentificationElasticSearchLogging":{
                    "dafault": "Relative path to Elasticsearch domain logging sources"
                },
                "SourceIdentificationElasticSearchEncryption":{
                    "dafault": "Relative path to Unencrypted Elasticsearch domain sources"
                },
                "SourceIdentificationElasticSearchPublicAccess":{
                    "dafault": "Relative path to Unencrypted Elasticsearch domain public access sources"
                },
                "SourceIdentificationTAChecks": {
                    "default": "Relative path to trusted advisor check sources"
                }
            }
        }
    },
    "Parameters": {
        "ResourcesPrefix": {
            "Type": "String",
            "MinLength": "3",
            "Default": "hammer-"
        },
        "SourceS3Bucket": {
            "Type": "String",
            "Default": ""
        },
        "NestedStackTemplate": {
            "Type": "String",
            "Default": ""
        },
        "IdentificationIAMRole": {
            "Type": "String",
            "Default": "cloudsec-master-id"
        },
        "IdentificationCheckRateExpression": {
          "Type": "String",
          "Default": "* * * ? *",
          "Description": "should not include minutes part"
        },
        "LambdaSubnets": {
            "Type" : "String",
            "Description" : "Comma-separated list, without spaces. Leave empty to run lambdas in default system-managed VPC (recommended). All specified security groups and subnets must be in the same VPC.",
            "Default": ""
        },
        "LambdaSecurityGroups": {
            "Type" : "String",
            "Description" : "Comma-separated list, without spaces. Leave empty to run lambdas with default access rules (recommended). All specified security groups and subnets must be in the same VPC.",
            "Default": ""
        },
        "SourceLogsForwarder": {
            "Type": "String",
            "Default": "logs-forwarder.zip"
        },
        "SourceBackupDDB": {
            "Type": "String",
            "Default": "ddb-tables-backup.zip"
        },
        "SourceIdentificationSG": {
            "Type": "String",
            "Default": "sg-issues-identification.zip"
        },
        "SourceIdentificationCloudTrails": {
            "Type": "String",
            "Default": "cloudtrails-issues-identification.zip"
        },
        "SourceIdentificationS3ACL": {
            "Type": "String",
            "Default": "s3-acl-issues-identification.zip"
        },
        "SourceIdentificationS3Policy": {
            "Type": "String",
            "Default": "s3-policy-issues-identification.zip"
        },
        "SourceIdentificationIAMUserKeysRotation": {
            "Type": "String",
            "Default": "iam-keyrotation-issues-identification.zip"
        },
        "SourceIdentificationIAMUserInactiveKeys": {
            "Type": "String",
            "Default": "iam-user-inactive-keys-identification.zip"
        },
        "SourceIdentificationEBSVolumes": {
            "Type": "String",
            "Default": "ebs-unencrypted-volume-identification.zip"
        },
        "SourceIdentificationEBSSnapshots": {
            "Type": "String",
            "Default": "ebs-public-snapshots-identification.zip"
        },
        "SourceIdentificationRDSSnapshots": {
            "Type": "String",
            "Default": "rds-public-snapshots-identification.zip"
        },
        "SourceIdentificationAMIPublicAccess": {
          "Type": "String",
          "Default": "ami-public-access-issues-identification.zip"
        },
        "SourceIdentificationSQSPublicPolicy": {
            "Type": "String",
            "Default": "sqs-public-policy-identification.zip"
        },
        "SourceIdentificationS3Encryption": {
            "Type": "String",
            "Default": "s3-unencrypted-bucket-issues-identification.zip"
        },
        "SourceIdentificationRDSEncryption": {
            "Type": "String",
            "Default": "rds-unencrypted-instance-identification.zip"
        },
        "SourceIdentificationRedshiftPublicAccess": {
            "Type": "String",
            "Default": "redshift-cluster-public-access-identification.zip"
        },
        "SourceIdentificationRedshiftClusterEncryption": {
            "Type": "String",
            "Default": "redshift-unencrypted-cluster-identification.zip"
        },
        "SourceIdentificationRedshiftLogging": {
            "Type": "String",
            "Default": "redshift-audit-logging-issues-identification.zip"
        },
        "SourceIdentificationECSPrivilegedAccess": {
            "Type": "String",
            "Default": "ecs-privileged-access-issues-identification.zip"
        },
        "SourceIdentificationECSLogging": {
            "Type": "String",
            "Default": "ecs-logging-issues-identification.zip"
        },
        "SourceIdentificationECSExternalImageSource": {
            "Type": "String",
            "Default": "ecs-external-image-source-issues-identification.zip"
        },
        "SourceIdentificationElasticSearchLogging": {
            "Type": "String",
            "Default": "elasticsearch-domain-logging-issues-identification.zip"
        },
        "SourceIdentificationElasticSearchEncryption": {
            "Type": "String",
            "Default": "elasticsearch-unencrypted-domain-identification.zip"
        },
        "SourceIdentificationElasticSearchPublicAccess": {
            "Type": "String",
            "Default": "elasticsearch-public-access-domain-identification.zip"
        },
        "SourceIdentificationTAChecks": {
            "Type": "String",
            "Default": "trusted-advisor-checks-identification.zip"
        }
    },
    "Conditions": {
        "LambdaSubnetsEmpty": {
            "Fn::Equals": [ {"Ref": "LambdaSubnets"}, "" ]
        },
        "LambdaSecurityGroupsEmpty": {
            "Fn::Equals": [ {"Ref": "LambdaSecurityGroups"}, "" ]
        }
    },
    "Mappings": {
        "NamingStandards": {
            "SNSTopicNameIdentificationErrors": {
                "value": "identification-errors"
            },
            "IdentificationMetricSecurityGroupsError": {
                "value": "SecurityGroupsError"
            },
            "IdentificationMetricCloudTrailsError": {
                "value": "CloudTrailsError"
            },
            "IdentificationMetricS3ACLError": {
                "value": "S3ACLError"
            },
            "IdentificationMetricS3PolicyError": {
                "value": "S3PolicyError"
            },
            "IdentificationMetricIAMUserKeysRotationError": {
                "value": "IAMUserKeysRotationError"
            },
            "IdentificationMetricIAMUserInactiveKeysError": {
                "value": "IAMUserInactiveKeysError"
            },
            "IdentificationMetricEBSVolumesError": {
                "value": "EBSVolumesError"
            },
            "IdentificationMetricEBSSnapshotsError": {
                "value": "EBSSnapshotsError"
            },
            "IdentificationMetricRDSSnapshotsError": {
                "value": "RDSSnapshotsError"
            },
            "IdentificationMetricAMIPublicAccessError": {
              "value": "AMIPublicAccessError"
            },
            "IdentificationMetricSQSPublicPolicyError": {
                "value": "SQSPublicPolicyError"
            },
            "IdentificationMetricS3EncryptionError": {
                "value": "S3EncryptionError"
            },
            "IdentificationMetricRDSEncryptionError": {
                "value": "RDSEncryptionError"
            },
            "IdentificationMetricRedshiftPublicAccessError": {
                "value": "RedshiftPublicAccessError"
            },
            "IdentificationMetricRedshiftClusterEncryptionError": {
                "value": "RedshiftClusterEncryptionError"
            },
            "IdentificationMetricRedshiftLoggingError": {
                "value": "RedshiftLoggingError"
            },
            "IdentificationMetricECSPrivilegedAccessError": {
                "value": "ECSPrivilegedAccessError"
            },
            "IdentificationMetricECSLoggingError": {
                "value": "ECSLoggingError"
            },
            "IdentificationMetricECSExternalImageSourceError": {
                "value": "ECSExternalImageSourceError"
            },
            "IdentificationMetricESLoggingError": {
                "value": "ESLoggingError"
            },
            "IdentificationMetricESEncryptionError": {
                "value": "ESEncryptionError"
            },
            "IdentificationMetricESPublicAccessError": {
                "value": "ESPublicAccessError"
            },
            "SNSDisplayNameSecurityGroups": {
                "value": "describe-security-groups-sns"
            },
            "SNSTopicNameSecurityGroups": {
                "value": "describe-security-groups-lambda"
            },
            "SNSDisplayNameCloudTrails": {
                "value": "describe-cloudtrails-sns"
            },
            "SNSTopicNameCloudTrails": {
                "value": "describe-cloudtrails-lambda"
            },
            "SNSDisplayNameS3ACL": {
                "value": "describe-s3-acl-sns"
            },
            "SNSTopicNameS3ACL": {
                "value": "describe-s3-acl-lambda"
            },
            "SNSDisplayNameS3Policy": {
                "value": "describe-s3-policy-sns"
            },
            "SNSTopicNameS3Policy": {
                "value": "describe-s3-policy-lambda"
            },
            "SNSDisplayNameIAMUserKeysRotation": {
                "value": "describe-iam-user-keys-rotation-sns"
            },
            "SNSTopicNameIAMUserKeysRotation": {
                "value": "describe-iam-user-keys-rotation-lambda"
            },
            "SNSDisplayNameIAMUserInactiveKeys": {
                "value": "describe-iam-user-inactive-keys-sns"
            },
            "SNSTopicNameIAMUserInactiveKeys": {
                "value": "describe-iam-user-inactive-keys-lambda"
            },
            "SNSDisplayNameEBSVolumes": {
                "value": "describe-ebs-volumes-sns"
            },
            "SNSTopicNameEBSVolumes": {
                "value": "describe-ebs-unencrypted-volumes-lambda"
            },
            "SNSDisplayNameEBSSnapshots": {
                "value": "describe-ebs-snapshots-sns"
            },
            "SNSTopicNameEBSSnapshots": {
                "value": "describe-ebs-public-snapshots-lambda"
            },
            "SNSDisplayNameRDSSnapshots": {
                "value": "describe-rds-snapshots-sns"
            },
            "SNSTopicNameRDSSnapshots": {
                "value": "describe-rds-public-snapshots-lambda"
            },
            "SNSDisplayNameAMIPublicAccess": {
                "value": "describe-ami-public-access-sns"
            },
            "SNSTopicNameAMIPublicAccess": {
              "value": "describe-ami-public-access-lambda"
            },
            "SNSDisplayNameSQSPublicPolicy": {
                "value": "describe-sqs-public-policy-sns"
            },
            "SNSTopicNameSQSPublicPolicy": {
                "value": "describe-sqs-public-policy-lambda"
            },
            "SNSDisplayNameS3Encryption": {
                "value": "describe-s3-encryption-sns"
            },
            "SNSTopicNameS3Encryption": {
                "value": "describe-s3-encryption-lambda"
            },
            "SNSDisplayNameRDSEncryption": {
                "value": "describe-rds-encryption-sns"
            },
            "SNSTopicNameRDSEncryption": {
                "value": "describe-rds-encryption-lambda"
            },
            "SNSDisplayNameRedshiftPublicAccess": {
                "value": "describe-redshift-public-access-sns"
            },
            "SNSTopicNameRedshiftPublicAccess": {
                "value": "describe-redshift-public-access-lambda"
            },
            "SNSDisplayNameRedshiftClusterEncryption": {
                "value": "describe-redshift-cluster-encryption-sns"
            },
            "SNSTopicNameRedshiftClusterEncryption": {
                "value": "describe-redshift-cluster-encryption-lambda"
            },
            "SNSDisplayNameRedshiftLogging": {
                "value": "describe-redshift-logging-sns"
            },
            "SNSTopicNameRedshiftLogging": {
                "value": "describe-redshift-logging-lambda"
            },
            "SNSDisplayNameECSPrivilegedAccess": {
                "value": "describe-ecs-privileged-access-sns"
            },
            "SNSTopicNameECSPrivilegedAccess": {
                "value": "describe-ecs-privileged-access-lambda"
            },
            "SNSDisplayNameECSLogging": {
                "value": "describe-ecs-logging-sns"
            },
            "SNSTopicNameECSLogging": {
                "value": "describe-ecs-logging-lambda"
            },
            "SNSDisplayNameECSExternalImageSource": {
                "value": "describe-ecs-external-image-source-sns"
            },
            "SNSTopicNameECSExternalImageSource": {
                "value": "describe-ecs-external-image-source-lambda"
            },
            "SNSDisplayNameESLogging": {
                "value": "describe-es-logging-sns"
            },
            "SNSTopicNameESLogging": {
                "value": "describe-es-logging-lambda"
            },
            "SNSDisplayNameESEncryption": {
                "value": "describe-es-encryption-sns"
            },
            "SNSTopicNameESEncryption": {
                "value": "describe-es-encryption-lambda"
            },
            "SNSDisplayNameESPublicAccess": {
                "value": "describe-es-public-access-sns"
            },
            "SNSTopicNameESPublicAccess": {
                "value": "describe-es-public-access-lambda"
            },
            "SNSDisplayNameTAChecks": {
                "value": "describe-ta-checks-sns"
            },
            "SNSTopicNameTAChecks": {
                "value": "describe-ta-checks-lambda"
            },
            "LogsForwarderLambdaFunctionName": {
                "value": "logs-forwarder"
            },
            "BackupDDBLambdaFunctionName": {
                "value": "backup-ddb"
            },
            "SecurityGroupLambdaFunctionName": {
                "value": "security-groups"
            },
            "CloudTrailsLambdaFunctionName": {
                "value": "cloudtrails"
            },
            "S3ACLLambdaFunctionName": {
                "value": "s3-acl"
            },
            "S3PolicyLambdaFunctionName": {
                "value": "s3-policy"
            },
            "IAMUserKeysRotationLambdaFunctionName": {
                "value": "iam-user-keys-rotation"
            },
            "IAMUserInactiveKeysLambdaFunctionName": {
                "value": "iam-user-inactive-keys"
            },
            "EBSVolumesLambdaFunctionName": {
                "value": "ebs-unencrypted-volumes"
            },
            "EBSSnapshotsLambdaFunctionName": {
                "value": "ebs-public-snapshots"
            },
            "RDSSnapshotsLambdaFunctionName": {
                "value": "rds-public-snapshots"
            },
            "AMIPublicAccessLambdaFunctionName": {
                "value": "ami-public-access"
            },
            "SQSPublicPolicyLambdaFunctionName": {
                "value": "sqs-public-policy"
            },
            "S3EncryptionLambdaFunctionName": {
                "value": "s3-encryption"
            },
            "RDSEncryptionLambdaFunctionName": {
                "value": "rds-encryption"
            },
            "RedshiftPublicAccessLambdaFunctionName": {
                "value": "redshift-public-access"
            },
            "RedshiftClusterEncryptionLambdaFunctionName": {
                "value": "redshift-cluster-encryption"
            },
            "RedshiftLoggingLambdaFunctionName": {
                "value": "redshift-logging"
            },
            "ECSPrivilegedAccessLambdaFunctionName": {
                "value": "ecs-privileged-access"
            },
            "ECSLoggingLambdaFunctionName": {
                "value": "ecs-logging"
            },
            "ECSExternalImageSourceLambdaFunctionName": {
                "value": "ecs-external-image-source"
            },
            "ESLoggingLambdaFunctionName": {
                "value": "elasticsearch-logging"
            },
            "ESEncryptionLambdaFunctionName": {
                "value": "elasticsearch-encryption"
            },
            "ESPublicAccessLambdaFunctionName": {
                "value": "elasticsearch-public-access"
            },
            "TAChecksLambdaFunctionName": {
                "value": "ta-checks"
            }
        }
    },
    "Resources": {
        "LambdaLogsForwarder": {
            "Type": "AWS::Lambda::Function",
            "DependsOn": ["LogGroupLambdaLogsForwarder"],
            "Properties": {
                "Code": {
                    "S3Bucket": { "Ref": "SourceS3Bucket" },
                    "S3Key": { "Ref": "SourceLogsForwarder" }
                },
                "Description": "Lambda function for parsing logs",
                "FunctionName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                                                     { "Fn::FindInMap": ["NamingStandards", "LogsForwarderLambdaFunctionName", "value"] } ]
                                              ]},
                "Handler": "logs_forwarder.lambda_handler",
                "MemorySize": 256,
                "Timeout": "300",
                "Role": {"Fn::Join" : ["", [ "arn:aws:iam::",
                                             { "Ref": "AWS::AccountId" },
                                             ":role/",
                                             { "Ref": "ResourcesPrefix" },
                                             { "Ref": "IdentificationIAMRole" }
                                           ] ]},
                "Runtime": "python3.6"
            }
        },
        "LogGroupLambdaLogsForwarder": {
            "Type" : "AWS::Logs::LogGroup",
            "Properties" : {
                "LogGroupName": {"Fn::Join": ["", [ "/aws/lambda/",
                                                    { "Ref": "ResourcesPrefix" },
                                                    { "Fn::FindInMap": ["NamingStandards",
                                                                        "LogsForwarderLambdaFunctionName",
                                                                        "value"]
                                                    } ] ] },
                "RetentionInDays": "7"
            }
        },
        "LambdaBackupDDB": {
            "Type": "AWS::Lambda::Function",
            "DependsOn": ["LogGroupLambdaBackupDDB"],
            "Properties": {
                "Code": {
                    "S3Bucket": { "Ref": "SourceS3Bucket" },
                    "S3Key": { "Ref": "SourceBackupDDB" }
                },
                "Description": "Lambda function for backup hammer DDB tables",
                "FunctionName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                                                     { "Fn::FindInMap": ["NamingStandards", "BackupDDBLambdaFunctionName", "value"] } ]
                                              ]},
                "Handler": "ddb_tables_backup.lambda_handler",
                "MemorySize": 256,
                "Timeout": "300",
                "Role": {"Fn::Join" : ["", [ "arn:aws:iam::",
                                             { "Ref": "AWS::AccountId" },
                                             ":role/",
                                             { "Ref": "ResourcesPrefix" },
                                             { "Ref": "IdentificationIAMRole" }
                                           ] ]},
                "Runtime": "python3.6"
            }
        },
        "LogGroupLambdaBackupDDB": {
            "Type" : "AWS::Logs::LogGroup",
            "Properties" : {
                "LogGroupName": {"Fn::Join": ["", [ "/aws/lambda/",
                                                    { "Ref": "ResourcesPrefix" },
                                                    { "Fn::FindInMap": ["NamingStandards",
                                                                        "BackupDDBLambdaFunctionName",
                                                                        "value"]
                                                    } ] ] },
                "RetentionInDays": "7"
            }
        },
        "SubscriptionFilterLambdaBackupDDB": {
            "Type" : "AWS::Logs::SubscriptionFilter",
            "DependsOn": ["LambdaLogsForwarder",
                          "PermissionToInvokeLambdaLogsForwarderCloudWatchLogs",
                          "LogGroupLambdaBackupDDB"],
            "Properties" : {
                "DestinationArn" : { "Fn::GetAtt" : [ "LambdaLogsForwarder", "Arn" ] },
                "FilterPattern" : "[level != START && level != END && level != DEBUG, ...]",
                "LogGroupName" : { "Ref": "LogGroupLambdaBackupDDB" }
            }
        },
        "EventBackupDDB": {
            "Type": "AWS::Events::Rule",
            "DependsOn": ["LambdaBackupDDB"],
            "Properties": {
                "Description": "Hammer ScheduledRule for DDB tables backup",
                "Name": {"Fn::Join" : ["", [{ "Ref": "ResourcesPrefix" }, "BackupDDB"] ] },
                "ScheduleExpression": "rate(1 day)",
                "State": "ENABLED",
                "Targets": [
                  {
                    "Arn": { "Fn::GetAtt": ["LambdaBackupDDB", "Arn"] },
                    "Id": "LambdaBackupDDB"
                  }
                ]
            }
        },
        "PermissionToInvokeLambdaLogsForwarderCloudWatchLogs": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": ["LambdaLogsForwarder"],
            "Properties": {
                "FunctionName": { "Ref": "LambdaLogsForwarder" },
                "Action": "lambda:InvokeFunction",
                "Principal": {"Fn::Join": ["", [ "logs.", { "Ref": "AWS::Region" }, ".amazonaws.com" ] ]},
                "SourceArn": {"Fn::Join": ["", [ "arn:aws:logs:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":log-group:*" ] ]}
            }
        },
        "PermissionToInvokeLambdaBackupDDBCloudWatchEvents": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": ["LambdaBackupDDB", "EventBackupDDB"],
            "Properties": {
                "FunctionName": { "Ref": "LambdaBackupDDB" },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": { "Fn::GetAtt": ["EventBackupDDB", "Arn"] }
            }
        },
        "SNSIdentificationErrors": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "TopicName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                                                  { "Fn::FindInMap": ["NamingStandards", "SNSTopicNameIdentificationErrors", "value"] } ]
                                           ]}
            }
        },
        "SubscriptionSNSIdentificationErrorsLambdaLogsForwarder": {
            "Type" : "AWS::SNS::Subscription",
            "DependsOn": ["SNSIdentificationErrors", "LambdaLogsForwarder"],
            "Properties" : {
                "Endpoint" : { "Fn::GetAtt" : [ "LambdaLogsForwarder", "Arn" ] },
                "Protocol" : "lambda",
                "TopicArn" : { "Ref": "SNSIdentificationErrors" }
            }
        },
        "PermissionToInvokeLambdaLogsForwarderSNS": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": ["SNSIdentificationErrors", "LambdaLogsForwarder"],
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "Principal": "sns.amazonaws.com",
                "SourceArn": { "Ref": "SNSIdentificationErrors" },
                "FunctionName": { "Fn::GetAtt": ["LambdaLogsForwarder", "Arn"] }
            }
        },
        "AlarmErrorsLambdaBackupDDB": {
            "Type": "AWS::CloudWatch::Alarm",
            "DependsOn": ["SNSIdentificationErrors", "LambdaBackupDDB"],
            "Properties": {
                "AlarmActions": [ { "Ref": "SNSIdentificationErrors" } ],
                "OKActions": [ { "Ref": "SNSIdentificationErrors" } ],
                "AlarmName": {"Fn::Join": ["/", [ { "Ref": "LambdaBackupDDB" }, "LambdaError" ] ]},
                "EvaluationPeriods": 1,
                "Namespace": "AWS/Lambda",
                "MetricName": "Errors",
                "Dimensions": [
                    {
                        "Name": "FunctionName",
                        "Value": { "Ref": "LambdaBackupDDB" }
                    }
                ],
                "Period": 86400,
                "Statistic": "Maximum",
                "ComparisonOperator" : "GreaterThanThreshold",
                "Threshold": 0,
                "TreatMissingData": "notBreaching"
            }
        },
        "StackEvaluateSG": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {"Ref":  "NestedStackTemplate"},
                "Parameters": {
                    "SourceS3Bucket": { "Ref": "SourceS3Bucket" },
                    "IdentificationIAMRole": {"Fn::Join" : ["", [ "arn:aws:iam::",
                                             { "Ref": "AWS::AccountId" },
                                             ":role/",
                                             { "Ref": "ResourcesPrefix" },
                                             { "Ref": "IdentificationIAMRole" }
                                           ] ]},
                    "IdentificationCheckRateExpression": {"Fn::Join": ["", [ "cron(", "35 ", { "Ref": "IdentificationCheckRateExpression" }, ")" ] ]},
                    "LambdaSubnets": {"Ref":  "LambdaSubnets"},
                    "LambdaSecurityGroups": {"Ref":  "LambdaSecurityGroups"},
                    "IdentificationLambdaSource": {"Ref":  "SourceIdentificationSG"},
                    "InitiateLambdaDescription": "Lambda function for initiate to identify bad security groups",
                    "EvaluateLambdaDescription": "Lambda function to describe security groups unrestricted access.",
                    "InitiateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "initiate-",
                                                     { "Fn::FindInMap": ["NamingStandards", "SecurityGroupLambdaFunctionName", "value"] } ]
                                              ]},
                    "EvaluateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "describe-",
                                                     { "Fn::FindInMap": ["NamingStandards", "SecurityGroupLambdaFunctionName", "value"] } ]
                                              ]},
                    "InitiateLambdaHandler": "initiate_to_desc_sec_grps.lambda_handler",
                    "EvaluateLambdaHandler": "describe_sec_grps_unrestricted_access.lambda_handler",
                    "EvaluateLambdaMemorySize": 512,
                    "LambdaLogsForwarderArn": { "Fn::GetAtt": ["LambdaLogsForwarder", "Arn"] },
                    "EventRuleDescription": "Hammer ScheduledRule to initiate Security Groups evaluations",
                    "EventRuleName": {"Fn::Join" : ["", [{ "Ref": "ResourcesPrefix" }, "InitiateEvaluationSG"] ] },
                    "SNSDisplayName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                        { "Fn::FindInMap": ["NamingStandards", "SNSDisplayNameSecurityGroups", "value"] } ]
                    ]},
                    "SNSTopicName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                        { "Fn::FindInMap": ["NamingStandards", "SNSTopicNameSecurityGroups", "value"] } ]
                    ]},
                    "SNSIdentificationErrors": {"Ref":  "SNSIdentificationErrors"}
                }
            }
        },
        "StackEvaluateCloudTrails": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {"Ref":  "NestedStackTemplate"},
                "Parameters": {
                    "SourceS3Bucket": { "Ref": "SourceS3Bucket" },
                    "IdentificationIAMRole": {"Fn::Join" : ["", [ "arn:aws:iam::",
                                             { "Ref": "AWS::AccountId" },
                                             ":role/",
                                             { "Ref": "ResourcesPrefix" },
                                             { "Ref": "IdentificationIAMRole" }
                                           ] ]},
                    "IdentificationCheckRateExpression": {"Fn::Join": ["", [ "cron(", "15 ", { "Ref": "IdentificationCheckRateExpression" }, ")" ] ]},
                    "LambdaSubnets": {"Ref":  "LambdaSubnets"},
                    "LambdaSecurityGroups": {"Ref":  "LambdaSecurityGroups"},
                    "IdentificationLambdaSource": { "Ref": "SourceIdentificationCloudTrails" },
                    "InitiateLambdaDescription": "Lambda function for initiate identification of CloudTrail issues",
                    "EvaluateLambdaDescription": "Lambda function for initiate identification of CloudTrail issues",
                    "InitiateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "initiate-",
                                                     { "Fn::FindInMap": ["NamingStandards", "CloudTrailsLambdaFunctionName", "value"] } ]
                                              ]},
                    "EvaluateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "describe-",
                                                     { "Fn::FindInMap": ["NamingStandards", "CloudTrailsLambdaFunctionName", "value"] } ]
                                              ]},
                    "InitiateLambdaHandler": "initiate_to_desc_cloudtrails.lambda_handler",
                    "EvaluateLambdaHandler": "describe_cloudtrails.lambda_handler",
                    "EvaluateLambdaMemorySize": 256,
                    "LambdaLogsForwarderArn": { "Fn::GetAtt": ["LambdaLogsForwarder", "Arn"] },
                    "EventRuleDescription": "Hammer ScheduledRule to initiate CloudTrails evaluations",
                    "EventRuleName": {"Fn::Join" : ["", [{ "Ref": "ResourcesPrefix" }, "InitiateEvaluationCloudTrails"] ] },
                    "SNSDisplayName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                        { "Fn::FindInMap": ["NamingStandards", "SNSDisplayNameCloudTrails", "value"] } ]
                    ]},
                    "SNSTopicName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                        { "Fn::FindInMap": ["NamingStandards", "SNSTopicNameCloudTrails", "value"] } ]
                    ]},
                    "SNSIdentificationErrors": {"Ref":  "SNSIdentificationErrors"}
                }
            }
        },
        "StackEvaluateS3ACL": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {"Ref":  "NestedStackTemplate"},
                "Parameters": {
                    "SourceS3Bucket": { "Ref": "SourceS3Bucket" },
                    "IdentificationIAMRole": {"Fn::Join" : ["", [ "arn:aws:iam::",
                                             { "Ref": "AWS::AccountId" },
                                             ":role/",
                                             { "Ref": "ResourcesPrefix" },
                                             { "Ref": "IdentificationIAMRole" }
                                           ] ]},
                    "IdentificationCheckRateExpression": {"Fn::Join": ["", [ "cron(", "10 ", { "Ref": "IdentificationCheckRateExpression" }, ")" ] ]},
                    "LambdaSubnets": {"Ref":  "LambdaSubnets"},
                    "LambdaSecurityGroups": {"Ref":  "LambdaSecurityGroups"},
                    "IdentificationLambdaSource": { "Ref": "SourceIdentificationS3ACL" },
                    "InitiateLambdaDescription": "Lambda function for initiate to identify public s3 buckets.",
                    "EvaluateLambdaDescription": "Lambda function to describe public s3 buckets.",
                    "InitiateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "initiate-",
                                                     { "Fn::FindInMap": ["NamingStandards", "S3ACLLambdaFunctionName", "value"] } ]
                                              ]},
                    "EvaluateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "describe-",
                                                     { "Fn::FindInMap": ["NamingStandards", "S3ACLLambdaFunctionName", "value"] } ]
                                              ]},
                    "InitiateLambdaHandler": "initiate_to_desc_s3_bucket_acl.lambda_handler",
                    "EvaluateLambdaHandler": "describe_s3_bucket_acl.lambda_handler",
                    "EvaluateLambdaMemorySize": 128,
                    "LambdaLogsForwarderArn": { "Fn::GetAtt": ["LambdaLogsForwarder", "Arn"] },
                    "EventRuleDescription": "Hammer ScheduledRule to initiate S3 ACL evaluations",
                    "EventRuleName": {"Fn::Join" : ["", [{ "Ref": "ResourcesPrefix" }, "InitiateEvaluationS3ACL"] ] },
                    "SNSDisplayName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                        { "Fn::FindInMap": ["NamingStandards", "SNSDisplayNameS3ACL", "value"] } ]
                    ]},
                    "SNSTopicName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                        { "Fn::FindInMap": ["NamingStandards", "SNSTopicNameS3ACL", "value"] } ]
                    ]},
                    "SNSIdentificationErrors": {"Ref":  "SNSIdentificationErrors"}
                }
            }
        },
        "StackEvaluateS3Policy": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {"Ref":  "NestedStackTemplate"},
                "Parameters": {
                    "SourceS3Bucket": { "Ref": "SourceS3Bucket" },
                    "IdentificationIAMRole": {"Fn::Join" : ["", [ "arn:aws:iam::",
                                             { "Ref": "AWS::AccountId" },
                                             ":role/",
                                             { "Ref": "ResourcesPrefix" },
                                             { "Ref": "IdentificationIAMRole" }
                                           ] ]},
                    "IdentificationCheckRateExpression": {"Fn::Join": ["", [ "cron(", "10 ", { "Ref": "IdentificationCheckRateExpression" }, ")" ] ]},
                    "LambdaSubnets": {"Ref":  "LambdaSubnets"},
                    "LambdaSecurityGroups": {"Ref":  "LambdaSecurityGroups"},
                    "IdentificationLambdaSource": { "Ref": "SourceIdentificationS3Policy" },
                    "InitiateLambdaDescription": "Lambda function for initiate to identify public s3 buckets.",
                    "EvaluateLambdaDescription": "Lambda function to describe public s3 buckets.",
                    "InitiateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "initiate-",
                                                     { "Fn::FindInMap": ["NamingStandards", "S3PolicyLambdaFunctionName", "value"] } ]
                                              ]},
                    "EvaluateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "describe-",
                                                     { "Fn::FindInMap": ["NamingStandards", "S3PolicyLambdaFunctionName", "value"] } ]
                                              ]},
                    "InitiateLambdaHandler": "initiate_to_desc_s3_bucket_policy.lambda_handler",
                    "EvaluateLambdaHandler": "describe_s3_bucket_policy.lambda_handler",
                    "EvaluateLambdaMemorySize": 128,
                    "LambdaLogsForwarderArn": { "Fn::GetAtt": ["LambdaLogsForwarder", "Arn"] },
                    "EventRuleDescription": "Hammer ScheduledRule to initiate S3 Policy evaluations",
                    "EventRuleName": {"Fn::Join" : ["", [{ "Ref": "ResourcesPrefix" }, "InitiateEvaluationS3Policy"] ] },
                    "SNSDisplayName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                        { "Fn::FindInMap": ["NamingStandards", "SNSDisplayNameS3Policy", "value"] } ]
                    ]},
                    "SNSTopicName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                        { "Fn::FindInMap": ["NamingStandards", "SNSTopicNameS3Policy", "value"] } ]
                    ]},
                    "SNSIdentificationErrors": {"Ref":  "SNSIdentificationErrors"}
                }
            }
        },
        "StackEvaluateIAMUserKeysRotation": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {"Ref":  "NestedStackTemplate"},
                "Parameters": {
                    "SourceS3Bucket": { "Ref": "SourceS3Bucket" },
                    "IdentificationIAMRole": {"Fn::Join" : ["", [ "arn:aws:iam::",
                                             { "Ref": "AWS::AccountId" },
                                             ":role/",
                                             { "Ref": "ResourcesPrefix" },
                                             { "Ref": "IdentificationIAMRole" }
                                           ] ]},
                    "IdentificationCheckRateExpression": {"Fn::Join": ["", [ "cron(", "10 ", { "Ref": "IdentificationCheckRateExpression" }, ")" ] ]},
                    "LambdaSubnets": {"Ref":  "LambdaSubnets"},
                    "LambdaSecurityGroups": {"Ref":  "LambdaSecurityGroups"},
                    "IdentificationLambdaSource": { "Ref": "SourceIdentificationIAMUserKeysRotation" },
                    "InitiateLambdaDescription": "Lambda function for initiate to identify IAM user keys which to be rotate.",
                    "EvaluateLambdaDescription": "Lambda function to describe IAM user keys to be rotated.",
                    "InitiateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "initiate-",
                                                     { "Fn::FindInMap": ["NamingStandards", "IAMUserKeysRotationLambdaFunctionName", "value"] } ]
                                              ]},
                    "EvaluateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "describe-",
                                                     { "Fn::FindInMap": ["NamingStandards", "IAMUserKeysRotationLambdaFunctionName", "value"] } ]
                                              ]},
                    "InitiateLambdaHandler": "initiate_to_desc_iam_users_key_rotation.lambda_handler",
                    "EvaluateLambdaHandler": "describe_iam_key_rotation.lambda_handler",
                    "EvaluateLambdaMemorySize": 128,
                    "LambdaLogsForwarderArn": { "Fn::GetAtt": ["LambdaLogsForwarder", "Arn"] },
                    "EventRuleDescription": "Hammer ScheduledRule to initiate IAMUserKeysRotation evaluations",
                    "EventRuleName": {"Fn::Join" : ["", [{ "Ref": "ResourcesPrefix" }, "InitiateEvaluationIAMUserKeysRotation"] ] },
                    "SNSDisplayName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                        { "Fn::FindInMap": ["NamingStandards", "SNSDisplayNameIAMUserKeysRotation", "value"] } ]
                    ]},
                    "SNSTopicName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                        { "Fn::FindInMap": ["NamingStandards", "SNSTopicNameIAMUserKeysRotation", "value"] } ]
                    ]},
                    "SNSIdentificationErrors": {"Ref":  "SNSIdentificationErrors"}
                }
            }
        },
        "StackEvaluateIAMUserInactiveKeys": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {"Ref":  "NestedStackTemplate"},
                "Parameters": {
                    "SourceS3Bucket": { "Ref": "SourceS3Bucket" },
                    "IdentificationIAMRole": {"Fn::Join" : ["", [ "arn:aws:iam::",
                                             { "Ref": "AWS::AccountId" },
                                             ":role/",
                                             { "Ref": "ResourcesPrefix" },
                                             { "Ref": "IdentificationIAMRole" }
                                           ] ]},
                    "IdentificationCheckRateExpression": {"Fn::Join": ["", [ "cron(", "0 ", { "Ref": "IdentificationCheckRateExpression" }, ")" ] ]},
                    "LambdaSubnets": {"Ref":  "LambdaSubnets"},
                    "LambdaSecurityGroups": {"Ref":  "LambdaSecurityGroups"},
                    "IdentificationLambdaSource": { "Ref": "SourceIdentificationIAMUserInactiveKeys" },
                    "InitiateLambdaDescription": "Lambda function for initiate to identify IAM user keys which last used.",
                    "EvaluateLambdaDescription": "Lambda function to describe IAM user keys last used.",
                    "InitiateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "initiate-",
                                                     { "Fn::FindInMap": ["NamingStandards", "IAMUserInactiveKeysLambdaFunctionName", "value"] } ]
                                              ]},
                    "EvaluateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "describe-",
                                                     { "Fn::FindInMap": ["NamingStandards", "IAMUserInactiveKeysLambdaFunctionName", "value"] } ]
                                              ]},
                    "InitiateLambdaHandler": "initiate_to_desc_iam_access_keys.lambda_handler",
                    "EvaluateLambdaHandler": "describe_iam_accesskey_details.lambda_handler",
                    "EvaluateLambdaMemorySize": 128,
                    "LambdaLogsForwarderArn": { "Fn::GetAtt": ["LambdaLogsForwarder", "Arn"] },
                    "EventRuleDescription": "Hammer ScheduledRule to initiate IAMUserInactiveKeys evaluations",
                    "EventRuleName": {"Fn::Join" : ["", [{ "Ref": "ResourcesPrefix" }, "InitiateEvaluationIAMUserInactiveKeys"] ] },
                    "SNSDisplayName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                        { "Fn::FindInMap": ["NamingStandards", "SNSDisplayNameIAMUserInactiveKeys", "value"] } ]
                    ]},
                    "SNSTopicName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                        { "Fn::FindInMap": ["NamingStandards", "SNSTopicNameIAMUserInactiveKeys", "value"] } ]
                    ]},
                    "SNSIdentificationErrors": {"Ref":  "SNSIdentificationErrors"}
                }
            }
        },
        "StackEvaluateEBSVolumes": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {"Ref":  "NestedStackTemplate"},
                "Parameters": {
                    "SourceS3Bucket": { "Ref": "SourceS3Bucket" },
                    "IdentificationIAMRole": {"Fn::Join" : ["", [ "arn:aws:iam::",
                                             { "Ref": "AWS::AccountId" },
                                             ":role/",
                                             { "Ref": "ResourcesPrefix" },
                                             { "Ref": "IdentificationIAMRole" }
                                           ] ]},
                    "IdentificationCheckRateExpression": {"Fn::Join": ["", [ "cron(", "20 ", { "Ref": "IdentificationCheckRateExpression" }, ")" ] ]},
                    "LambdaSubnets": {"Ref":  "LambdaSubnets"},
                    "LambdaSecurityGroups": {"Ref":  "LambdaSecurityGroups"},
                    "IdentificationLambdaSource": { "Ref": "SourceIdentificationEBSVolumes" },
                    "InitiateLambdaDescription": "Lambda function for initiate to identify unencrypted EBS volumes.",
                    "EvaluateLambdaDescription": "Lambda function to describe unencrypted ebs volumes.",
                    "InitiateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "initiate-",
                                                     { "Fn::FindInMap": ["NamingStandards", "EBSVolumesLambdaFunctionName", "value"] } ]
                                              ]},
                    "EvaluateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "describe-",
                                                     { "Fn::FindInMap": ["NamingStandards", "EBSVolumesLambdaFunctionName", "value"] } ]
                                              ]},
                    "InitiateLambdaHandler": "initiate_to_desc_ebs_unencrypted_volumes.lambda_handler",
                    "EvaluateLambdaHandler": "describe_ebs_unencrypted_volumes.lambda_handler",
                    "EvaluateLambdaMemorySize": 256,
                    "LambdaLogsForwarderArn": { "Fn::GetAtt": ["LambdaLogsForwarder", "Arn"] },
                    "EventRuleDescription": "Hammer ScheduledRule to initiate EBS volumes evaluations",
                    "EventRuleName": {"Fn::Join" : ["", [{ "Ref": "ResourcesPrefix" }, "InitiateEvaluationEBSVolumes"] ] },
                    "SNSDisplayName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                        { "Fn::FindInMap": ["NamingStandards", "SNSDisplayNameEBSVolumes", "value"] } ]
                    ]},
                    "SNSTopicName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                        { "Fn::FindInMap": ["NamingStandards", "SNSTopicNameEBSVolumes", "value"] } ]
                    ]},
                    "SNSIdentificationErrors": {"Ref":  "SNSIdentificationErrors"}
                }
            }
        },
        "StackEvaluateEBSSnapshots": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {"Ref":  "NestedStackTemplate"},
                "Parameters": {
                    "SourceS3Bucket": { "Ref": "SourceS3Bucket" },
                    "IdentificationIAMRole": {"Fn::Join" : ["", [ "arn:aws:iam::",
                                             { "Ref": "AWS::AccountId" },
                                             ":role/",
                                             { "Ref": "ResourcesPrefix" },
                                             { "Ref": "IdentificationIAMRole" }
                                           ] ]},
                    "IdentificationCheckRateExpression": {"Fn::Join": ["", [ "cron(", "25 ", { "Ref": "IdentificationCheckRateExpression" }, ")" ] ]},
                    "LambdaSubnets": {"Ref":  "LambdaSubnets"},
                    "LambdaSecurityGroups": {"Ref":  "LambdaSecurityGroups"},
                    "IdentificationLambdaSource": { "Ref": "SourceIdentificationEBSSnapshots" },
                    "InitiateLambdaDescription": "Lambda function for initiate to identify public EBS snapshots.",
                    "EvaluateLambdaDescription": "Lambda function to describe public ebs snapshots.",
                    "InitiateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "initiate-",
                                                     { "Fn::FindInMap": ["NamingStandards", "EBSSnapshotsLambdaFunctionName", "value"] } ]
                                              ]},
                    "EvaluateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "describe-",
                                                     { "Fn::FindInMap": ["NamingStandards", "EBSSnapshotsLambdaFunctionName", "value"] } ]
                                              ]},
                    "InitiateLambdaHandler": "initiate_to_desc_ebs_public_snapshots.lambda_handler",
                    "EvaluateLambdaHandler": "describe_ebs_public_snapshots.lambda_handler",
                    "EvaluateLambdaMemorySize": 512,
                    "LambdaLogsForwarderArn": { "Fn::GetAtt": ["LambdaLogsForwarder", "Arn"] },
                    "EventRuleDescription": "Hammer ScheduledRule to initiate EBS snapshots evaluations",
                    "EventRuleName": {"Fn::Join" : ["", [{ "Ref": "ResourcesPrefix" }, "InitiateEvaluationEBSSnapshots"] ] },
                    "SNSDisplayName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                        { "Fn::FindInMap": ["NamingStandards", "SNSDisplayNameEBSSnapshots", "value"] } ]
                    ]},
                    "SNSTopicName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                        { "Fn::FindInMap": ["NamingStandards", "SNSTopicNameEBSSnapshots", "value"] } ]
                    ]},
                    "SNSIdentificationErrors": {"Ref":  "SNSIdentificationErrors"}
                }
            }
        },
        "StackEvaluateRDSSnapshots": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {"Ref":  "NestedStackTemplate"},
                "Parameters": {
                    "SourceS3Bucket": { "Ref": "SourceS3Bucket" },
                    "IdentificationIAMRole": {"Fn::Join" : ["", [ "arn:aws:iam::",
                                             { "Ref": "AWS::AccountId" },
                                             ":role/",
                                             { "Ref": "ResourcesPrefix" },
                                             { "Ref": "IdentificationIAMRole" }
                                           ] ]},
                    "IdentificationCheckRateExpression": {"Fn::Join": ["", [ "cron(", "30 ", { "Ref": "IdentificationCheckRateExpression" }, ")" ] ]},
                    "LambdaSubnets": {"Ref":  "LambdaSubnets"},
                    "LambdaSecurityGroups": {"Ref":  "LambdaSecurityGroups"},
                    "IdentificationLambdaSource": { "Ref": "SourceIdentificationRDSSnapshots" },
                    "InitiateLambdaDescription": "Lambda function for initiate to identify public RDS snapshots.",
                    "EvaluateLambdaDescription": "Lambda function to describe public RDS snapshots.",
                    "InitiateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "initiate-",
                                                     { "Fn::FindInMap": ["NamingStandards", "RDSSnapshotsLambdaFunctionName", "value"] } ]
                                              ]},
                    "EvaluateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "describe-",
                                                     { "Fn::FindInMap": ["NamingStandards", "RDSSnapshotsLambdaFunctionName", "value"] } ]
                                              ]},
                    "InitiateLambdaHandler": "initiate_to_desc_rds_public_snapshots.lambda_handler",
                    "EvaluateLambdaHandler": "describe_rds_public_snapshots.lambda_handler",
                    "EvaluateLambdaMemorySize": 256,
                    "LambdaLogsForwarderArn": { "Fn::GetAtt": ["LambdaLogsForwarder", "Arn"] },
                    "EventRuleDescription": "Hammer ScheduledRule to initiate RDS snapshots evaluations",
                    "EventRuleName": {"Fn::Join" : ["", [{ "Ref": "ResourcesPrefix" }, "InitiateEvaluationRDSSnapshots"] ] },
                    "SNSDisplayName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                        { "Fn::FindInMap": ["NamingStandards", "SNSDisplayNameRDSSnapshots", "value"] } ]
                    ]},
                    "SNSTopicName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                        { "Fn::FindInMap": ["NamingStandards", "SNSTopicNameRDSSnapshots", "value"] } ]
                    ]},
                    "SNSIdentificationErrors": {"Ref":  "SNSIdentificationErrors"}
                }
            }
        },
        "StackEvaluateSQSPublicPolicy": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {"Ref":  "NestedStackTemplate"},
                "Parameters": {
                    "SourceS3Bucket": { "Ref": "SourceS3Bucket" },
                    "IdentificationIAMRole": {"Fn::Join" : ["", [ "arn:aws:iam::",
                                             { "Ref": "AWS::AccountId" },
                                             ":role/",
                                             { "Ref": "ResourcesPrefix" },
                                             { "Ref": "IdentificationIAMRole" }
                                           ] ]},
                    "IdentificationCheckRateExpression": {"Fn::Join": ["", [ "cron(", "40 ", { "Ref": "IdentificationCheckRateExpression" }, ")" ] ]},
                    "LambdaSubnets": {"Ref":  "LambdaSubnets"},
                    "LambdaSecurityGroups": {"Ref":  "LambdaSecurityGroups"},
                    "IdentificationLambdaSource": { "Ref": "SourceIdentificationSQSPublicPolicy" },
                    "InitiateLambdaDescription": "Lambda function for initiate to identify public SQS queues.",
                    "EvaluateLambdaDescription": "Lambda function to describe public SQS queues.",
                    "InitiateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "initiate-",
                                                     { "Fn::FindInMap": ["NamingStandards", "SQSPublicPolicyLambdaFunctionName", "value"] } ]
                                              ]},
                    "EvaluateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "describe-",
                                                     { "Fn::FindInMap": ["NamingStandards", "SQSPublicPolicyLambdaFunctionName", "value"] } ]
                                              ]},
                    "InitiateLambdaHandler": "initiate_to_desc_sqs_public_policy.lambda_handler",
                    "EvaluateLambdaHandler": "describe_sqs_public_policy.lambda_handler",
                    "EvaluateLambdaMemorySize": 256,
                    "LambdaLogsForwarderArn": { "Fn::GetAtt": ["LambdaLogsForwarder", "Arn"] },
                    "EventRuleDescription": "Hammer ScheduledRule to initiate SQS queue evaluations",
                    "EventRuleName": {"Fn::Join" : ["", [{ "Ref": "ResourcesPrefix" }, "InitiateEvaluationSQSPublicPolicy"] ] },
                    "SNSDisplayName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                        { "Fn::FindInMap": ["NamingStandards", "SNSDisplayNameSQSPublicPolicy", "value"] } ]
                    ]},
                    "SNSTopicName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                        { "Fn::FindInMap": ["NamingStandards", "SNSTopicNameSQSPublicPolicy", "value"] } ]
                    ]},
                    "SNSIdentificationErrors": {"Ref":  "SNSIdentificationErrors"}
                }
            }
        },
        "StackEvaluateS3Encryption": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {"Ref":  "NestedStackTemplate"},
                "Parameters": {
                    "SourceS3Bucket": { "Ref": "SourceS3Bucket" },
                    "IdentificationIAMRole": {"Fn::Join" : ["", [ "arn:aws:iam::",
                                             { "Ref": "AWS::AccountId" },
                                             ":role/",
                                             { "Ref": "ResourcesPrefix" },
                                             { "Ref": "IdentificationIAMRole" }
                                           ] ]},
                    "IdentificationCheckRateExpression": {"Fn::Join": ["", [ "cron(", "10 ", { "Ref": "IdentificationCheckRateExpression" }, ")" ] ]},
                    "LambdaSubnets": {"Ref":  "LambdaSubnets"},
                    "LambdaSecurityGroups": {"Ref":  "LambdaSecurityGroups"},
                    "IdentificationLambdaSource": { "Ref": "SourceIdentificationS3Encryption" },
                    "InitiateLambdaDescription": "Lambda function for initiate to identify S3 unencrypted buckets.",
                    "EvaluateLambdaDescription": "Lambda function to describe un-encrypted S3 buckets.",
                    "InitiateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "initiate-",
                                                     { "Fn::FindInMap": ["NamingStandards", "S3EncryptionLambdaFunctionName", "value"] } ]
                                              ]},
                    "EvaluateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "describe-",
                                                     { "Fn::FindInMap": ["NamingStandards", "S3EncryptionLambdaFunctionName", "value"] } ]
                                              ]},
                    "InitiateLambdaHandler": "initiate_to_desc_s3_encryption.lambda_handler",
                    "EvaluateLambdaHandler": "describe_s3_encryption.lambda_handler",
                    "EvaluateLambdaMemorySize": 256,
                    "LambdaLogsForwarderArn": { "Fn::GetAtt": ["LambdaLogsForwarder", "Arn"] },
                    "EventRuleDescription": "Hammer ScheduledRule to initiate S3 encryption evaluations",
                    "EventRuleName": {"Fn::Join" : ["", [{ "Ref": "ResourcesPrefix" }, "InitiateEvaluationS3Encryption"] ] },
                    "SNSDisplayName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                        { "Fn::FindInMap": ["NamingStandards", "SNSDisplayNameS3Encryption", "value"] } ]
                    ]},
                    "SNSTopicName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                        { "Fn::FindInMap": ["NamingStandards", "SNSTopicNameS3Encryption", "value"] } ]
                    ]},
                    "SNSIdentificationErrors": {"Ref":  "SNSIdentificationErrors"}
                }
            }
        },
        "StackEvaluateRDSEncryption": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {"Ref":  "NestedStackTemplate"},
                "Parameters": {
                    "SourceS3Bucket": { "Ref": "SourceS3Bucket" },
                    "IdentificationIAMRole": {"Fn::Join" : ["", [ "arn:aws:iam::",
                                             { "Ref": "AWS::AccountId" },
                                             ":role/",
                                             { "Ref": "ResourcesPrefix" },
                                             { "Ref": "IdentificationIAMRole" }
                                           ] ]},
                    "IdentificationCheckRateExpression": {"Fn::Join": ["", [ "cron(", "40 ", { "Ref": "IdentificationCheckRateExpression" }, ")" ] ]},
                    "LambdaSubnets": {"Ref":  "LambdaSubnets"},
                    "LambdaSecurityGroups": {"Ref":  "LambdaSecurityGroups"},
                    "IdentificationLambdaSource": { "Ref": "SourceIdentificationRDSEncryption" },
                    "InitiateLambdaDescription": "Lambda function for initiate to identify unencrypted RDS instances.",
                    "EvaluateLambdaDescription": "Lambda function to describe un-encrypted RDS instances.",
                    "InitiateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "initiate-",
                                                     { "Fn::FindInMap": ["NamingStandards", "RDSEncryptionLambdaFunctionName", "value"] } ]
                                              ]},
                    "EvaluateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "describe-",
                                                     { "Fn::FindInMap": ["NamingStandards", "RDSEncryptionLambdaFunctionName", "value"] } ]
                                              ]},
                    "InitiateLambdaHandler": "initiate_to_desc_rds_instance_encryption.lambda_handler",
                    "EvaluateLambdaHandler": "describe_rds_instance_encryption.lambda_handler",
                    "EvaluateLambdaMemorySize": 256,
                    "LambdaLogsForwarderArn": { "Fn::GetAtt": ["LambdaLogsForwarder", "Arn"] },
                    "EventRuleDescription": "Hammer ScheduledRule to initiate rds instance encryption evaluations",
                    "EventRuleName": {"Fn::Join" : ["", [{ "Ref": "ResourcesPrefix" }, "InitiateEvaluationRDSEncryption"] ] },
                    "SNSDisplayName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                        { "Fn::FindInMap": ["NamingStandards", "SNSDisplayNameRDSEncryption", "value"] } ]
                    ]},
                    "SNSTopicName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                                                  { "Fn::FindInMap": ["NamingStandards", "SNSTopicNameRDSEncryption", "value"] } ]
                    ]},
                    "SNSIdentificationErrors": {"Ref":  "SNSIdentificationErrors"}
                }
            }
        },
        "StackEvaluateAmiPublicAccess": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {"Ref":  "NestedStackTemplate"},
                "Parameters": {
                    "SourceS3Bucket": { "Ref": "SourceS3Bucket" },
                    "IdentificationIAMRole": {"Fn::Join" : ["", [ "arn:aws:iam::",
                                             { "Ref": "AWS::AccountId" },
                                             ":role/",
                                             { "Ref": "ResourcesPrefix" },
                                             { "Ref": "IdentificationIAMRole" }
                                           ] ]},
                    "IdentificationCheckRateExpression": {"Fn::Join": ["", [ "cron(", "45 ", { "Ref": "IdentificationCheckRateExpression" }, ")" ] ]},
                    "LambdaSubnets": {"Ref":  "LambdaSubnets"},
                    "LambdaSecurityGroups": {"Ref":  "LambdaSecurityGroups"},
                    "IdentificationLambdaSource": { "Ref": "SourceIdentificationAMIPublicAccess" },
                    "InitiateLambdaDescription": "Lambda function for initiate to identify public AMI access issues.",
                    "EvaluateLambdaDescription": "Lambda function to describe public AMI issues.",
                    "InitiateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "initiate-",
                                                     { "Fn::FindInMap": ["NamingStandards", "AMIPublicAccessLambdaFunctionName", "value"] } ]
                                              ]},
                    "EvaluateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "describe-",
                                                     { "Fn::FindInMap": ["NamingStandards", "AMIPublicAccessLambdaFunctionName", "value"] } ]
                                              ]},
                    "InitiateLambdaHandler": "initiate_to_desc_public_ami_issues.lambda_handler",
                    "EvaluateLambdaHandler": "describe_public_ami_issues.lambda_handler",
                    "EvaluateLambdaMemorySize": 256,
                    "LambdaLogsForwarderArn": { "Fn::GetAtt": ["LambdaLogsForwarder", "Arn"] },
                    "EventRuleDescription": "Hammer ScheduledRule to initiate public AMI access evaluations",
                    "EventRuleName": {"Fn::Join" : ["", [{ "Ref": "ResourcesPrefix" }, "InitiateEvaluationAMIPublicAccess"] ] },
                    "SNSDisplayName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                        { "Fn::FindInMap": ["NamingStandards", "SNSDisplayNameAMIPublicAccess", "value"] } ]
                    ]},
                    "SNSTopicName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                                                  { "Fn::FindInMap": ["NamingStandards", "SNSTopicNameAMIPublicAccess", "value"] } ]
                    ]},
                    "SNSIdentificationErrors": {"Ref":  "SNSIdentificationErrors"}
                }
            }
        },
        "StackEvaluateRedshiftPublicAccess": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {"Ref":  "NestedStackTemplate"},
                "Parameters": {
                    "SourceS3Bucket": { "Ref": "SourceS3Bucket" },
                    "IdentificationIAMRole": {"Fn::Join" : ["", [ "arn:aws:iam::",
                                             { "Ref": "AWS::AccountId" },
                                             ":role/",
                                             {"Ref": "ResourcesPrefix"},
                                             {"Ref": "IdentificationIAMRole"}
                                           ] ]},
                    "IdentificationCheckRateExpression": {"Fn::Join": ["", [ "cron(", "40 ", { "Ref": "IdentificationCheckRateExpression" }, ")" ] ]},
                    "LambdaSubnets": {"Ref":  "LambdaSubnets"},
                    "LambdaSecurityGroups": {"Ref":  "LambdaSecurityGroups"},
                    "IdentificationLambdaSource": { "Ref": "SourceIdentificationRedshiftPublicAccess" },
                    "InitiateLambdaDescription": "Lambda function to initiate to identify Redshift public access issues.",
                    "EvaluateLambdaDescription": "Lambda function to describe Redshift public access issues.",
                    "InitiateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "initiate-",
                                                     { "Fn::FindInMap": ["NamingStandards", "RedshiftPublicAccessLambdaFunctionName", "value"] } ]
                                              ]},
                    "EvaluateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "describe-",
                                                     { "Fn::FindInMap": ["NamingStandards", "RedshiftPublicAccessLambdaFunctionName", "value"] } ]
                                              ]},
                    "InitiateLambdaHandler": "initiate_to_desc_redshift_cluster_public_access.lambda_handler",
                    "EvaluateLambdaHandler": "describe_redshift_cluster_public_access.lambda_handler",
                    "EvaluateLambdaMemorySize": 256,
                    "LambdaLogsForwarderArn": { "Fn::GetAtt": ["LambdaLogsForwarder", "Arn"] },
                    "EventRuleDescription": "Hammer ScheduledRule to initiate Redshift public access issues evaluations",
                    "EventRuleName": {"Fn::Join" : ["", [{ "Ref": "ResourcesPrefix" }, "InitiateEvaluationRedshiftPublicAccess"] ] },
                    "SNSDisplayName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                        { "Fn::FindInMap": ["NamingStandards", "SNSDisplayNameRedshiftPublicAccess", "value"] } ]
                    ]},
                    "SNSTopicName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                                                  { "Fn::FindInMap": ["NamingStandards", "SNSTopicNameRedshiftPublicAccess", "value"] } ]
                    ]},
                    "SNSIdentificationErrors": {"Ref":  "SNSIdentificationErrors"}
                }
            }
        },
        "StackEvaluateRedshiftClusterEncryption": {
                    "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {"Ref":  "NestedStackTemplate"},
                "Parameters": {
                    "SourceS3Bucket": { "Ref": "SourceS3Bucket" },
                    "IdentificationIAMRole": {"Fn::Join" : ["", [ "arn:aws:iam::",
                                             { "Ref": "AWS::AccountId" },
                                             ":role/",
                                             { "Ref": "ResourcesPrefix" },
                                             { "Ref": "IdentificationIAMRole" }
                                           ] ]},
                    "IdentificationCheckRateExpression": {"Fn::Join": ["", [ "cron(", "40 ", { "Ref": "IdentificationCheckRateExpression" }, ")" ] ]},
                    "LambdaSubnets": {"Ref":  "LambdaSubnets"},
                    "LambdaSecurityGroups": {"Ref":  "LambdaSecurityGroups"},
                                        "IdentificationLambdaSource": { "Ref": "SourceIdentificationRedshiftClusterEncryption" },
                    "InitiateLambdaDescription": "Lambda function for initiate to identify Redshift cluster is encrypted or not.",
                    "EvaluateLambdaDescription": "Lambda function to describe Redshift cluster is encrypted or not.",
                    "InitiateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "initiate-",
                                                     { "Fn::FindInMap": ["NamingStandards", "RedshiftClusterEncryptionLambdaFunctionName", "value"] } ]
                                              ]},
                    "EvaluateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "describe-",
                                                     { "Fn::FindInMap": ["NamingStandards", "RedshiftClusterEncryptionLambdaFunctionName", "value"] } ]
                                              ]},
                    "InitiateLambdaHandler": "initiate_to_desc_redshift_encryption.lambda_handler",
                    "EvaluateLambdaHandler": "describe_redshift_encryption.lambda_handler",
                    "EvaluateLambdaMemorySize": 256,
                    "LambdaLogsForwarderArn": { "Fn::GetAtt": ["LambdaLogsForwarder", "Arn"] },
                    "EventRuleDescription": "Hammer ScheduledRule to initiate Redshift Cluster evaluations",
                    "EventRuleName": {"Fn::Join" : ["", [{ "Ref": "ResourcesPrefix" }, "InitiateEvaluationRedshiftClusterEncryption"] ] },
                    "SNSDisplayName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                        { "Fn::FindInMap": ["NamingStandards", "SNSDisplayNameRedshiftClusterEncryption", "value"] } ]
                    ]},
                    "SNSTopicName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                                                  { "Fn::FindInMap": ["NamingStandards", "SNSTopicNameRedshiftClusterEncryption", "value"] } ]

                    ]},
                    "SNSIdentificationErrors": {"Ref":  "SNSIdentificationErrors"}
                }
            }
        },
        "StackEvaluateRedshiftLogging": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {"Ref":  "NestedStackTemplate"},
                "Parameters": {
                    "SourceS3Bucket": { "Ref": "SourceS3Bucket" },
                    "IdentificationIAMRole": {"Fn::Join" : ["", [ "arn:aws:iam::",
                                             { "Ref": "AWS::AccountId" },
                                             ":role/",
                                             { "Ref": "ResourcesPrefix" },
                                             { "Ref": "IdentificationIAMRole" }
                                           ] ]},
                    "IdentificationCheckRateExpression": {"Fn::Join": ["", [ "cron(", "40 ", { "Ref": "IdentificationCheckRateExpression" }, ")" ] ]},
                    "LambdaSubnets": {"Ref":  "LambdaSubnets"},
                    "LambdaSecurityGroups": {"Ref":  "LambdaSecurityGroups"},
                    "IdentificationLambdaSource": { "Ref": "SourceIdentificationRedshiftLogging" },
                    "InitiateLambdaDescription": "Lambda function for initiate to identify Redshift logging issues.",
                    "EvaluateLambdaDescription": "Lambda function to describe Redshift logging issues.",
                    "InitiateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "initiate-",
                                                     { "Fn::FindInMap": ["NamingStandards", "RedshiftLoggingLambdaFunctionName", "value"] } ]
                                              ]},
                    "EvaluateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "describe-",
                                                     { "Fn::FindInMap": ["NamingStandards", "RedshiftLoggingLambdaFunctionName", "value"] } ]
                                              ]},
                    "InitiateLambdaHandler": "initiate_to_desc_redshift_logging_issues.lambda_handler",
                    "EvaluateLambdaHandler": "describe_redshift_logging_issues.lambda_handler",
                    "EvaluateLambdaMemorySize": 256,
                    "LambdaLogsForwarderArn": { "Fn::GetAtt": ["LambdaLogsForwarder", "Arn"] },
                    "EventRuleDescription": "Hammer ScheduledRule to initiate Redshift logging issues evaluations",
                    "EventRuleName": {"Fn::Join" : ["", [{ "Ref": "ResourcesPrefix" }, "InitiateEvaluationRedshiftLogging"] ] },
                    "SNSDisplayName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                        { "Fn::FindInMap": ["NamingStandards", "SNSDisplayNameRedshiftLogging", "value"] } ]
                    ]},
                    "SNSTopicName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                                                  { "Fn::FindInMap": ["NamingStandards", "SNSTopicNameRedshiftLogging", "value"] } ]
                    ]},
                    "SNSIdentificationErrors": {"Ref":  "SNSIdentificationErrors"}
                }
            }
        },
        "StackEvaluateECSPrivilegedAccess": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {"Ref":  "NestedStackTemplate"},
                "Parameters": {
                    "SourceS3Bucket": { "Ref": "SourceS3Bucket" },
                    "IdentificationIAMRole": {"Fn::Join" : ["", [ "arn:aws:iam::",
                                             { "Ref": "AWS::AccountId" },
                                             ":role/",
                                             { "Ref": "ResourcesPrefix" },
                                             { "Ref": "IdentificationIAMRole" }
                                           ] ]},
                    "IdentificationCheckRateExpression": {"Fn::Join": ["", [ "cron(", "40 ", { "Ref": "IdentificationCheckRateExpression" }, ")" ] ]},
                    "LambdaSubnets": {"Ref":  "LambdaSubnets"},
                    "LambdaSecurityGroups": {"Ref":  "LambdaSecurityGroups"},
                    "IdentificationLambdaSource": { "Ref": "SourceIdentificationECSPrivilegedAccess" },
                    "InitiateLambdaDescription": "Lambda function for initiate to identify ECS privileged access issues.",
                    "EvaluateLambdaDescription": "Lambda function to describe ECS privileged access issues.",
                    "InitiateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "initiate-",
                                                     { "Fn::FindInMap": ["NamingStandards", "ECSPrivilegedAccessLambdaFunctionName", "value"] } ]
                                              ]},
                    "EvaluateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "describe-",
                                                     { "Fn::FindInMap": ["NamingStandards", "ECSPrivilegedAccessLambdaFunctionName", "value"] } ]
                                              ]},
                    "InitiateLambdaHandler": "initiate_to_desc_ecs_privileged_access_issues.lambda_handler",
                    "EvaluateLambdaHandler": "describe_ecs_privileged_access_issues.lambda_handler",
                    "EvaluateLambdaMemorySize": 256,
                    "LambdaLogsForwarderArn": { "Fn::GetAtt": ["LambdaLogsForwarder", "Arn"] },
                    "EventRuleDescription": "Hammer ScheduledRule to initiate ECS privileged access evaluations",
                    "EventRuleName": {"Fn::Join" : ["", [{ "Ref": "ResourcesPrefix" }, "InitiateEvaluationECSPrivilegedAccess"] ] },
                    "SNSDisplayName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                        { "Fn::FindInMap": ["NamingStandards", "SNSDisplayNameECSPrivilegedAccess", "value"] } ]
                    ]},
                    "SNSTopicName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                                                  { "Fn::FindInMap": ["NamingStandards", "SNSTopicNameECSPrivilegedAccess", "value"] } ]
                    ]},
                    "SNSIdentificationErrors": {"Ref":  "SNSIdentificationErrors"}
                }
            }
        },
        "StackEvaluateECSLogging": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {"Ref": "NestedStackTemplate"},
                "Parameters": {
                    "SourceS3Bucket": {"Ref": "SourceS3Bucket"},
                    "IdentificationIAMRole": {"Fn::Join": ["", ["arn:aws:iam::",
                                             {"Ref": "AWS::AccountId"},
                                             ":role/",
                                             {"Ref": "ResourcesPrefix"},
                                             {"Ref": "IdentificationIAMRole"}
                                           ] ]},
                    "IdentificationCheckRateExpression": {"Fn::Join": ["",["cron(","40 ",{"Ref": "IdentificationCheckRateExpression"},")"]]},
                    "LambdaSubnets": {"Ref": "LambdaSubnets"},
                    "LambdaSecurityGroups": {"Ref": "LambdaSecurityGroups"},
                    "IdentificationLambdaSource": {"Ref": "SourceIdentificationECSLogging"},
                    "InitiateLambdaDescription": "Lambda function for initiate to identify ECS logging enabled or not.",
                    "EvaluateLambdaDescription": "Lambda function to describe ECS logging enabled or not.",
                    "InitiateLambdaName": {"Fn::Join": ["",[{"Ref": "ResourcesPrefix"}, "initiate-",
                                { "Fn::FindInMap": ["NamingStandards","ECSLoggingLambdaFunctionName","value"]}]
                    ]},
                    "EvaluateLambdaName": {"Fn::Join": ["",[{"Ref": "ResourcesPrefix"}, "describe-",
                                {"Fn::FindInMap": ["NamingStandards","ECSLoggingLambdaFunctionName","value"]}]
                    ]},
                    "InitiateLambdaHandler": "initiate_to_desc_ecs_logging_issues.lambda_handler",
                    "EvaluateLambdaHandler": "describe_ecs_logging_issues.lambda_handler",
                    "EvaluateLambdaMemorySize": 256,
                    "LambdaLogsForwarderArn": {"Fn::GetAtt": ["LambdaLogsForwarder","Arn"]},
                    "EventRuleDescription": "Hammer ScheduledRule to initiate ECS logging enabled or not evaluations",
                    "EventRuleName": {"Fn::Join": ["", [ {"Ref": "ResourcesPrefix"}, "InitiateEvaluationECSLogging"]]},
                    "SNSDisplayName": {"Fn::Join": ["",[{"Ref": "ResourcesPrefix"},
                                {"Fn::FindInMap": ["NamingStandards","SNSDisplayNameECSLogging","value"]}]
                    ]},
                    "SNSTopicName": {"Fn::Join": ["",[{"Ref": "ResourcesPrefix"},
                        {"Fn::FindInMap": ["NamingStandards","SNSTopicNameECSLogging","value"]}]
                    ]},
                    "SNSIdentificationErrors": {"Ref": "SNSIdentificationErrors"}
                }
            }
        },
        "StackEvaluateECSExternalImageSource": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {"Ref":  "NestedStackTemplate"},
                "Parameters": {
                    "SourceS3Bucket": { "Ref": "SourceS3Bucket" },
                    "IdentificationIAMRole": {"Fn::Join" : ["", [ "arn:aws:iam::",
                                             { "Ref": "AWS::AccountId" },
                                             ":role/",
                                             { "Ref": "ResourcesPrefix" },
                                             { "Ref": "IdentificationIAMRole" }
                                           ] ]},
                    "IdentificationCheckRateExpression": {"Fn::Join": ["", [ "cron(", "40 ", { "Ref": "IdentificationCheckRateExpression" }, ")" ] ]},
                    "LambdaSubnets": {"Ref":  "LambdaSubnets"},
                    "LambdaSecurityGroups": {"Ref":  "LambdaSecurityGroups"},
                    "IdentificationLambdaSource": { "Ref": "SourceIdentificationECSExternalImageSource" },
                    "InitiateLambdaDescription": "Lambda function for initiate to identify ECS image source is internal or external.",
                    "EvaluateLambdaDescription": "Lambda function to describe ECS image source is internal or external.",
                    "InitiateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "initiate-",
                                                     { "Fn::FindInMap": ["NamingStandards", "ECSExternalImageSourceLambdaFunctionName", "value"] } ]
                                              ]},
                    "EvaluateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "describe-",
                                                     { "Fn::FindInMap": ["NamingStandards", "ECSExternalImageSourceLambdaFunctionName", "value"] } ]
                                              ]},
                    "InitiateLambdaHandler": "initiate_to_desc_ecs_external_image_source_issues.lambda_handler",
                    "EvaluateLambdaHandler": "describe_ecs_external_image_source_issues.lambda_handler",
                    "EvaluateLambdaMemorySize": 256,
                    "LambdaLogsForwarderArn": { "Fn::GetAtt": ["LambdaLogsForwarder", "Arn"] },
                    "EventRuleDescription": "Hammer ScheduledRule to initiate ECS image source evaluations",
                    "EventRuleName": {"Fn::Join" : ["", [{ "Ref": "ResourcesPrefix" }, "InitiateEvaluationECSExternalImageSource"] ] },
                    "SNSDisplayName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                        { "Fn::FindInMap": ["NamingStandards", "SNSDisplayNameECSExternalImageSource", "value"] } ]
                    ]},
                    "SNSTopicName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                                                  { "Fn::FindInMap": ["NamingStandards", "SNSTopicNameECSExternalImageSource", "value"] } ]
                    ]},
                    "SNSIdentificationErrors": {"Ref":  "SNSIdentificationErrors"}
                }
            }
        },
        "StackEvaluateESEncryption": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {"Ref":  "NestedStackTemplate"},
                "Parameters": {
                    "SourceS3Bucket": { "Ref": "SourceS3Bucket" },
                    "IdentificationIAMRole": {"Fn::Join" : ["", [ "arn:aws:iam::",
                                             { "Ref": "AWS::AccountId" },
                                             ":role/",
                                             { "Ref": "ResourcesPrefix" },
                                             { "Ref": "IdentificationIAMRole" }
                                           ] ]},
                    "IdentificationCheckRateExpression": {"Fn::Join": ["", [ "cron(", "40 ", { "Ref": "IdentificationCheckRateExpression" }, ")" ] ]},
                    "LambdaSubnets": {"Ref":  "LambdaSubnets"},
                    "LambdaSecurityGroups": {"Ref":  "LambdaSecurityGroups"},
                    "IdentificationLambdaSource": { "Ref": "SourceIdentificationElasticSearchEncryption" },
                    "InitiateLambdaDescription": "Lambda function for initiate to identify unencrypted Elasticsearch domains.",
                    "EvaluateLambdaDescription": "Lambda function to describe un-encrypted Elasticsearch domains.",
                    "InitiateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "initiate-",
                                                     { "Fn::FindInMap": ["NamingStandards", "ESEncryptionLambdaFunctionName", "value"] } ]
                                              ]},
                    "EvaluateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "describe-",
                                                     { "Fn::FindInMap": ["NamingStandards", "ESEncryptionLambdaFunctionName", "value"] } ]
                                              ]},
                    "InitiateLambdaHandler": "initiate_to_desc_elasticsearch_unencrypted_domains.lambda_handler",
                    "EvaluateLambdaHandler": "describe_elasticsearch_unencrypted_domains.lambda_handler",
                    "EvaluateLambdaMemorySize": 256,
                    "LambdaLogsForwarderArn": { "Fn::GetAtt": ["LambdaLogsForwarder", "Arn"] },
                    "EventRuleDescription": "Hammer ScheduledRule to initiate Elasticsearch domain encryption evaluations",
                    "EventRuleName": {"Fn::Join" : ["", [{ "Ref": "ResourcesPrefix" }, "InitiateEvaluationESEncryption"] ] },
                    "SNSDisplayName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                        { "Fn::FindInMap": ["NamingStandards", "SNSDisplayNameESEncryption", "value"] } ]
                    ]},
                    "SNSTopicName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                                                  { "Fn::FindInMap": ["NamingStandards", "SNSTopicNameESEncryption", "value"] } ]
                    ]},
                    "SNSIdentificationErrors": {"Ref":  "SNSIdentificationErrors"}
                }
            }
        },
        "StackEvaluateESLogging": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {"Ref":  "NestedStackTemplate"},
                "Parameters": {
                    "SourceS3Bucket": { "Ref": "SourceS3Bucket" },
                    "IdentificationIAMRole": {"Fn::Join" : ["", [ "arn:aws:iam::",
                                             { "Ref": "AWS::AccountId" },
                                             ":role/",
                                             { "Ref": "ResourcesPrefix" },
                                             { "Ref": "IdentificationIAMRole" }
                                           ] ]},
                    "IdentificationCheckRateExpression": {"Fn::Join": ["", [ "cron(", "40 ", { "Ref": "IdentificationCheckRateExpression" }, ")" ] ]},
                    "LambdaSubnets": {"Ref":  "LambdaSubnets"},
                    "LambdaSecurityGroups": {"Ref":  "LambdaSecurityGroups"},
                    "IdentificationLambdaSource": { "Ref": "SourceIdentificationElasticSearchLogging" },
                    "InitiateLambdaDescription": "Lambda function for initiate to identify Elasticsearch domain logging issues.",
                    "EvaluateLambdaDescription": "Lambda function to describe Elasticsearch domain logging issues.",
                    "InitiateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "initiate-",
                                                     { "Fn::FindInMap": ["NamingStandards", "ESLoggingLambdaFunctionName", "value"] } ]
                                              ]},
                    "EvaluateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "describe-",
                                                     { "Fn::FindInMap": ["NamingStandards", "ESLoggingLambdaFunctionName", "value"] } ]
                                              ]},
                    "InitiateLambdaHandler": "initiate_to_desc_elasticsearch_domains_logging_issues.lambda_handler",
                    "EvaluateLambdaHandler": "describe_elasticsearch_domains_logging_issues.lambda_handler",
                    "EvaluateLambdaMemorySize": 256,
                    "LambdaLogsForwarderArn": { "Fn::GetAtt": ["LambdaLogsForwarder", "Arn"] },
                    "EventRuleDescription": "Hammer ScheduledRule to initiate Elasticsearch domain logging evaluations",
                    "EventRuleName": {"Fn::Join" : ["", [{ "Ref": "ResourcesPrefix" }, "InitiateEvaluationESLogging"] ] },
                    "SNSDisplayName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                        { "Fn::FindInMap": ["NamingStandards", "SNSDisplayNameESLogging", "value"] } ]
                    ]},
                    "SNSTopicName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                                                  { "Fn::FindInMap": ["NamingStandards", "SNSTopicNameESLogging", "value"] } ]
                    ]},
                    "SNSIdentificationErrors": {"Ref":  "SNSIdentificationErrors"}
                }
            }
        },
        "StackEvaluateESPublicAccess": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {"Ref":  "NestedStackTemplate"},
                "Parameters": {
                    "SourceS3Bucket": { "Ref": "SourceS3Bucket" },
                    "IdentificationIAMRole": {"Fn::Join" : ["", [ "arn:aws:iam::",
                                             { "Ref": "AWS::AccountId" },
                                             ":role/",
                                             { "Ref": "ResourcesPrefix" },
                                             { "Ref": "IdentificationIAMRole" }
                                           ] ]},
                    "IdentificationCheckRateExpression": {"Fn::Join": ["", [ "cron(", "40 ", { "Ref": "IdentificationCheckRateExpression" }, ")" ] ]},
                    "LambdaSubnets": {"Ref":  "LambdaSubnets"},
                    "LambdaSecurityGroups": {"Ref":  "LambdaSecurityGroups"},
                    "IdentificationLambdaSource": { "Ref": "SourceIdentificationElasticSearchPublicAccess" },
                    "InitiateLambdaDescription": "Lambda function for initiate to identify publicly accessible Elasticsearch domains.",
                    "EvaluateLambdaDescription": "Lambda function to describe publicly accessible Elasticsearch domains.",
                    "InitiateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "initiate-",
                                                     { "Fn::FindInMap": ["NamingStandards", "ESPublicAccessLambdaFunctionName", "value"] } ]
                                              ]},
                    "EvaluateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "describe-",
                                                     { "Fn::FindInMap": ["NamingStandards", "ESPublicAccessLambdaFunctionName", "value"] } ]
                                              ]},
                    "InitiateLambdaHandler": "initiate_to_desc_elasticsearch_public_access_domains.lambda_handler",
                    "EvaluateLambdaHandler": "describe_elasticsearch_public_access_domains.lambda_handler",
                    "EvaluateLambdaMemorySize": 256,
                    "LambdaLogsForwarderArn": { "Fn::GetAtt": ["LambdaLogsForwarder", "Arn"] },
                    "EventRuleDescription": "Hammer ScheduledRule to initiate Elasticsearch domain public access evaluations",
                    "EventRuleName": {"Fn::Join" : ["", [{ "Ref": "ResourcesPrefix" }, "InitiateEvaluationESPublicAccess"] ] },
                    "SNSDisplayName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                        { "Fn::FindInMap": ["NamingStandards", "SNSDisplayNameESPublicAccess", "value"] } ]
                    ]},
                    "SNSTopicName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                                                  { "Fn::FindInMap": ["NamingStandards", "SNSTopicNameESPublicAccess", "value"] } ]
                    ]},
                    "SNSIdentificationErrors": {"Ref":  "SNSIdentificationErrors"}
                }
            }
        },
        "StackEvaluateTAChecks": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {"Ref":  "NestedStackTemplate"},
                "Parameters": {
                    "SourceS3Bucket": { "Ref": "SourceS3Bucket" },
                    "IdentificationIAMRole": {"Fn::Join" : ["", [ "arn:aws:iam::",
                                             { "Ref": "AWS::AccountId" },
                                             ":role/",
                                             { "Ref": "ResourcesPrefix" },
                                             { "Ref": "IdentificationIAMRole" }
                                           ] ]},
                    "IdentificationCheckRateExpression": {"Fn::Join": ["", [ "cron(", "40 ", { "Ref": "IdentificationCheckRateExpression" }, ")" ] ]},
                    "LambdaSubnets": {"Ref":  "LambdaSubnets"},
                    "LambdaSecurityGroups": {"Ref":  "LambdaSecurityGroups"},
                    "IdentificationLambdaSource": { "Ref": "SourceIdentificationTAChecks" },
                    "InitiateLambdaDescription": "Lambda function for initiate trusted advisor's checks.",
                    "EvaluateLambdaDescription": "Lambda function to describe trusted advisor's checks.",
                    "InitiateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "initiate-",
                                                     { "Fn::FindInMap": ["NamingStandards", "TAChecksLambdaFunctionName", "value"] } ]
                                              ]},
                    "EvaluateLambdaName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" }, "describe-",
                                                     { "Fn::FindInMap": ["NamingStandards", "TAChecksLambdaFunctionName", "value"] } ]
                                              ]},
                    "InitiateLambdaHandler": "initiate_to_desc_ta_checks.lambda_handler",
                    "EvaluateLambdaHandler": "describe_ta_checks.lambda_handler",
                    "EvaluateLambdaMemorySize": 256,
                    "LambdaLogsForwarderArn": { "Fn::GetAtt": ["LambdaLogsForwarder", "Arn"] },
                    "EventRuleDescription": "Hammer ScheduledRule to initiate Trusted Advisor Checks",
                    "EventRuleName": {"Fn::Join" : ["", [{ "Ref": "ResourcesPrefix" }, "InitiateEvaluationTAChecks"] ] },
                    "SNSDisplayName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                        { "Fn::FindInMap": ["NamingStandards", "SNSDisplayNameTAChecks", "value"] } ]
                    ]},
                    "SNSTopicName": {"Fn::Join" : ["", [ { "Ref": "ResourcesPrefix" },
                                                  { "Fn::FindInMap": ["NamingStandards", "SNSTopicNameTAChecks", "value"] } ]
                    ]},
                    "SNSIdentificationErrors": {"Ref":  "SNSIdentificationErrors"}
                }
            }
        }
    },
    "Outputs": {
        "LambdaLogsForwarderArn": {"Value": { "Fn::GetAtt": ["LambdaLogsForwarder", "Arn"] }}
    }
}